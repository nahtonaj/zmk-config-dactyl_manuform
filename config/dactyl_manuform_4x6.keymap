#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define WIN 0
#define MAC 1
#define GAME 2
#define FUN 3
#define NAV 4
#define MED 5

/ {

    behaviors {
        lh_pht: left_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <400>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 34 35 46 47 30 31 32 33 42 43 44 45 55 56 57 58 54 55>;    // <---[[right-hand keys]]
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };
    };

    behaviors {
        rh_pht: right_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <400>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 48 49 50 51 52 53>;    // <---[[right-hand keys]]
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        windows_layer {
            bindings = <
                &trans     &kp Q  &kp W    &kp E    &kp R    &kp T               &kp Y     &kp U   &kp I     &kp O   &kp P    &kp GRAVE
                &mt LCTRL ESC  &lh_pht LEFT_SHIFT A  &lh_pht LEFT_GUI S  &lh_pht LEFT_ALT D  &lh_pht LCTRL F       &kp G           &kp H        &rh_pht RCTRL J            &rh_pht RIGHT_ALT K  &rh_pht RIGHT_GUI L  &rh_pht RIGHT_SHIFT SEMICOLON  &kp SQT
                &kp LSHFT &kp Z  &kp X    &kp C    &kp V    &kp B               &kp N     &kp M   &kp COMMA &kp DOT &kp FSLH &kp BSLH
                                 &kp LBKT &kp RBKT &kp DEL  &kp BSPC            &kp SPACE &kp RET &kp MINUS &kp EQUAL
                                                   &mo FUN  &kp LCTRL           &mo NAV   &mo FUN
                                                   &kp LGUI &kp LALT            &kp MED   &kp RCTRL
            >;
        };

        mac_layer {
            bindings = <
                &trans     &kp Q  &kp W    &kp E    &kp R    &kp T               &kp Y     &kp U   &kp I     &kp O   &kp P    &kp GRAVE
                &mt LCTRL ESC  &lh_pht LEFT_SHIFT A  &lh_pht LEFT_GUI S  &lh_pht LEFT_ALT D  &lh_pht LCTRL F       &kp G           &kp H        &rh_pht RCTRL J            &rh_pht RIGHT_ALT K  &rh_pht RIGHT_GUI L  &rh_pht RIGHT_SHIFT SEMICOLON  &kp SQT
                &kp LSHFT &kp Z  &kp X    &kp C    &kp V    &kp B               &kp N     &kp M   &kp COMMA &kp DOT &kp FSLH &kp BSLH
                                 &kp LBKT &kp RBKT &kp DEL  &kp BSPC            &kp SPACE &kp RET &kp MINUS &kp EQUAL
                                                   &mo FUN  &kp LGUI            &mo NAV   &mo FUN
                                                   &kp LCTRL &kp LALT           &kp MED   &kp RGUI
            >;
        };

        game_layer {
            bindings = <
                &trans     &kp Q  &kp W    &kp E    &kp R    &kp T               &kp Y     &kp U   &kp I     &kp O   &kp P    &kp GRAVE
                &mt LCTRL ESC  &lh_pht LEFT_SHIFT A  &lh_pht LEFT_GUI S  &lh_pht LEFT_ALT D  &lh_pht LCTRL F       &kp G           &kp H        &rh_pht RCTRL J            &rh_pht RIGHT_ALT K  &rh_pht RIGHT_GUI L  &rh_pht RIGHT_SHIFT SEMICOLON  &kp SQT
                &kp LSHFT &kp Z  &kp X    &kp C    &kp V    &kp B               &kp N     &kp M   &kp COMMA &kp DOT &kp FSLH &kp BSLH
                                 &kp LBKT &kp RBKT &kp BSPC &kp SPACE           &kp DEL   &kp RET &kp MINUS &kp EQUAL
                                                   &mo FUN  &kp LCTRL           &mo NAV   &mo FUN
                                                   &kp LGUI &kp LALT            &kp MED   &kp RCTRL
            >;
        };

        function_layer {
            bindings = <
                &trans &kp N1    &kp N2   &kp N3   &kp N4   &kp N5              &kp N6    &kp N7  &kp N8    &kp N9  &kp N0   &trans
                &trans &kp EXCL  &kp AT   &kp HASH &kp DLLR &kp PRCNT           &trans    &kp N4  &kp N5    &kp N6  &trans   &trans
                &trans &kp CARET &kp AMPS &kp STAR &kp LPAR &kp RPAR            &trans    &kp N1  &kp N2    &kp N3  &trans   &trans
                                 &trans   &trans   &trans   &trans              &trans    &trans  &kp N0    &kp DOT
                                                   &trans   &trans              &trans    &trans
                                                   &trans   &trans              &trans    &trans
            >;
        };

        navigation_layer {
            bindings = <
                &kp F12  &kp F1 &kp F2 &kp F3 &kp F4 &kp F5               &kp F6 &kp F7   &kp F8    &kp F9    &kp F10   &kp F11
                &trans  &trans &trans &trans &trans  &trans               &trans &kp LEFT &kp UP    &kp DOWN  &kp RIGHT &trans
                &trans  &trans &trans &trans &trans  &trans               &trans &kp HOME &kp PG_UP &kp PG_DN &kp END   &trans
                               &trans &trans &trans  &trans               &trans &trans   &trans    &trans
                                             &trans  &trans               &trans &trans
                                             &trans  &trans               &trans &trans
            >;
        };

        media_layer {
            bindings = <
                &bt BT_CLR    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3  &bt BT_SEL 4               &trans          &trans           &rgb_ug RGB_SPI  &rgb_ug RGB_SPD &trans           &trans
                &out OUT_TOG  &to WIN &to MAC &to GAME &trans  &trans                                         &kp C_PP        &kp C_NEXT       &kp C_VOL_UP     &kp C_VOL_DN    &kp C_PREV       &trans
                &trans        &trans &trans &trans &trans  &trans                                             &rgb_ug RGB_TOG &rgb_ug RGB_EFR  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD &rgb_ug RGB_EFF  &trans
                                     &trans &trans &trans  &trans               &trans &trans &trans &trans
                                                   &trans  &trans               &trans &trans
                                                   &trans  &trans               &trans &trans
            >;
        };
    };
};
